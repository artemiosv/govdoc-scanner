const legal_types = [
  "AE (Ανώνυμη Εταιρία)",
  "OE (Ομόρρυθμη Εταιρία)",
  "ΣυνΠΕ (Συνεταιριστική ΠΕ)",
  "EE (Εταιρία Ετερόρρυθμη)",
  "ΕΠΕ (Εταιρία Περιορισμένης Ευθύνης)",
  "Ευρωπαϊκός Όμιλος Οικονομικού Σκοπού",
  "Συνεταιρισμός",
  "Ευρωπαϊκή Εταιρία (SE)",
  "Ευρωπαϊκή Συνεταιριστική Εταιρία (SCE)",
  "Κοινοπραξία",
  "Υποκατάστημα Αλλοδαπής",
  "ΑΤΟΜΙΚΗ",
  "ΑΣΤΙΚΗ ΕΤΑΙΡΕΙΑ 784 Α.Κ.",
  "IKE (Ιδιωτική Κεφαλαιουχική Εταιρεία)",
  "ΚΟΙ.Σ.Π.Ε (Κοινωνικός Συνεταιρισμός Περιορισμένης Ευθύνης)",
  "Αγροτικός Συνεταιρισμός",
  "Ενεργειακή Κοινότητα",
  "Κοιν.Σ.Επ. (Κοινωνική Συνεταιριστική Επιχείρηση)",
  "Συνεταιρισμός Εργαζομένων",
  "ΕΕ κατά μετόχες",
  "ΚΟΙΝΟΤΗΤΑ ΑΝΑΝΕΩΣΙΜΗΣ ΕΝΕΡΓΕΙΑΣ",
  "ΕΝΕΡΓΕΙΑΚΗ ΚΟΙΝΟΤΗΤΑ ΠΟΛΙΤΩΝ",
];

const competent_gemi_offices = [
  "ΕΜΠΟΡΙΚΟ & ΒΙΟΜΗΧΑΝΙΚΟ ΕΠΙΜΕΛΗΤΗΡΙΟ ΑΘΗΝΩΝ",
  "ΒΙΟΤΕΧΝΙΚΟ ΕΠΙΜΕΛΗΤΗΡΙΟ ΑΘΗΝΑΣ",
  "ΕΠΑΓΓΕΛΜΑΤΙΚΟ ΕΠΙΜΕΛΗΤΗΡΙΟ ΑΘΗΝΑΣ",
  "ΕΜΠΟΡΙΚΟ & ΒΙΟΜΗΧΑΝΙΚΟ ΕΠΙΜΕΛΗΤΗΡΙΟ ΘΕΣ/ΝΙΚΗΣ",
  "ΒΙΟΤΕΧΝΙΚΟ ΕΠΙΜΕΛΗΤΗΡΙΟ ΘΕΣΣΑΛΟΝΙΚΗΣ",
  "ΕΠΑΓΓΕΛΜΑΤΙΚΟ ΕΠΙΜΕΛΗΤΗΡΙΟ ΘΕΣΣΑΛΟΝΙΚΗΣ",
  "ΕΜΠΟΡΙΚΟ & ΒΙΟΜΗΧΑΝΙΚΟ ΕΠΙΜΕΛΗΤΗΡΙΟ ΠΕΙΡΑΙΩΣ",
  "ΒΙΟΤΕΧΝΙΚΟ ΕΠΙΜΕΛΗΤΗΡΙΟ ΠΕΙΡΑΙΩΣ",
  "ΕΠΑΓΓΕΛΜΑΤΙΚΟ ΕΠΙΜΕΛΗΤΗΡΙΟ ΠΕΙΡΑΙΩΣ",
  "ΕΜΠΟΡΙΚΟ & ΒΙΟΜΗΧΑΝΙΚΟ ΕΠΙΜΕΛΗΤΗΡΙΟ ΡΟΔΟΠΗΣ",
  "ΕΠΑΓΓΕΛΜΑΤΙΚΟ & ΒΙΟΤΕΧΝΙΚΟ ΕΠΙΜΕΛΗΤΗΡΙΟ ΡΟΔΟΠΗΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΑΙΤΩΛΟΑΚΑΡΝΑΝΙΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΑΡΓΟΛΙΔΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΑΡΚΑΔΙΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΑΡΤΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΑΧΑΪΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΒΟΙΩΤΙΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΓΡΕΒΕΝΩΝ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΔΡΑΜΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΔΩΔ/ΝΗΣΟΥ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΕΒΡΟΥ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΕΥΒΟΙΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΕΥΡΥΤΑΝΙΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΖΑΚΥΝΘΟΥ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΗΛΕΙΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΗΜΑΘΙΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΗΡΑΚΛΕΙΟΥ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΘΕΣΠΡΩΤΙΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΙΩΑΝΝΙΝΩΝ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΚΑΒΑΛΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΚΑΡΔΙΤΣΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΚΑΣΤΟΡΙΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΚΕΡΚΥΡΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΚΕΦΑΛΛΗΝΙΑΣ-ΙΘΑΚΗΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΚΙΛΚΙΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΚΟΖΑΝΗΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΚΟΡΙΝΘΙΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΚΥΚΛΑΔΩΝ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΛΑΚΩΝΙΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΛΑΡΙΣΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΛΑΣΙΘΙΟΥ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΛΕΣΒΟΥ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΛΕΥΚΑΔΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΜΑΓΝΗΣΙΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΜΕΣΣΗΝΙΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΞΑΝΘΗΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΠΕΛΛΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΠΙΕΡΙΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΠΡΕΒΕΖΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΡΕΘΥΜΝΗΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΣΑΜΟΥ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΣΕΡΡΩΝ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΤΡΙΚΑΛΩΝ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΦΘΙΩΤΙΔΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΦΛΩΡΙΝΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΦΩΚΙΔΑΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΧΑΛΚΙΔΙΚΗΣ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΧΑΝΙΩΝ",
  "ΕΠΙΜΕΛΗΤΗΡΙΟ ΧΙΟΥ",
  "Δ/νση Εταιρειών (Γενική Γραμματεία Εμπορίου & Προστασίας Καταναλωτή)",
  "ΚΕΝΤΡΙΚΗ ΕΝΩΣΗ ΕΠΙΜΕΛΗΤΗΡΙΩΝ",
  "Υ.ΚΟΙ.Σ.Ο.-Διεύθυνση Κ.Α.Λ.Ο.",
];

export const CompanyEssentialMetadata = {
  title: "Company Essential Metadata",
  description: "Extract essential company metadata from documents",
  type: "object",
  properties: {
    gemi_id: {
      type: "string",
      description: "General Commercial Registry (GEMI) number",
      nullable: true,
    },
    company_name: {
      type: "string",
      description: "Official registered name of the company",
      nullable: true,
    },
    representatives: {
      type: "array",
      items: { type: "string" },
      description:
        "List of representatives of the company, last name first, all caps. Do not add father,mother names or any special characters. (e.g. 'ΣΜΙΤΣΗΣ ΑΝΔΡΕΑΣ'). Make sure to add people who 100% represent the company. Do not add other people.",
      nullable: true,
    },
    creation_date: {
      type: "string",
      description: "Date of company creation in YYYY-MM-DD format",
      nullable: true,
    },
    registered_address: {
      type: "string",
      description:
        "Official registered address of the company, all caps, no δημος and no ταχυδρομικός κώδικας and no region (e.g. 'MYKONOU 1'). Do not add the city or region if that's the only thing available.",
      nullable: true,
    },
    company_type: {
      type: "string",
      description: "Legal type of the company",
      nullable: true,
      enum: legal_types,
    },
    competent_gemi_office: {
      type: "string",
      description: "Responsible local GEMI service office",
      nullable: true,
      enum: competent_gemi_offices,
    },
    region: {
      type: "string",
      description:
        "Region of the company's headquarters (only Περιφερειακή Ενότητα ...)",
      nullable: true,
    },
    city: {
      type: "string",
      description: "City where the company is registered, no region",
      nullable: true,
    },
    postal_code: {
      type: "string",
      description: "Postal code (TK) of the company",
      nullable: true,
    },
    document_type: {
      type: "string",
      description:
        "Type of the document(e.g. 'Ανακοίνωση σύστασης από ΥΜΣ','Ανακοίνωση τροποποίησης καταστατικού')",
      nullable: true,
    },
    document_date: {
      type: "string",
      description: "Date of the document in YYYY-MM-DD format",
      nullable: true,
    },
    summary: {
      type: "string",
      description:
        "Summary of the document and the changes it brings to the company",
      nullable: true,
    },
  },
  required: [
    "gemi_id",
    "company_name",
    "representatives",
    "creation_date",
    "registered_address",
    "company_type",
    "competent_gemi_office",
    "region",
    "city",
    "postal_code",
    "document_type",
    "document_date",
    "summary",
  ],
  propertyOrdering: [
    "gemi_id",
    "company_name",
    "representatives",
    "creation_date",
    "registered_address",
    "company_type",
    "competent_gemi_office",
    "region",
    "city",
    "postal_code",
    "document_type",
    "document_date",
    "summary",
  ],
};

export const DocumentHistoriesSchema = {
  type: "object",
  properties: {
    documentHistories: {
      type: "array",
      description:
        "An array of history segments, one for each source document, where each segment is written considering the overall context of all documents and their chronological order.",
      items: {
        type: "object",
        properties: {
          sourceFile: {
            type: "string",
            description:
              "The name of the original source file from the input 'Collected Metadata' (e.g., 'report_2020.pdf'). THIS MUST MATCH THE INPUT SOURCE FILE NAME.",
          },
          historySegment: {
            type: "string",
            description:
              "A concise history segment in Greek related to this specific document, synthesized by considering its information in the context of all other provided documents and its chronological position. This should reflect its place in the timeline or its specific contribution/relevance.",
          },
        },
        required: ["sourceFile", "historySegment"],
      },
    },
  },
  required: ["documentHistories"],
};
