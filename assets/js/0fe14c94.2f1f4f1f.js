"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[507],{6204:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"code-examples/doc-scanner-examples","title":"Doc-Scanner Examples","description":"The doc-scanner application processes documents (PDF, DOC, DOCX) to extract metadata and generate contextual histories.","source":"@site/docs/code-examples/doc-scanner-examples.md","sourceDirName":"code-examples","slug":"/code-examples/doc-scanner-examples","permalink":"/govdoc-scanner/docs/code-examples/doc-scanner-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/flexivian/govdoc-scanner/edit/main/docs-site/docs/code-examples/doc-scanner-examples.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Crawler Examples","permalink":"/govdoc-scanner/docs/code-examples/crawler-examples"},"next":{"title":"GSoC 2025 Project Overview: GovDoc Scanner","permalink":"/govdoc-scanner/docs/gsoc/2025/overview"}}');var o=s(4848),r=s(8453);const c={sidebar_position:3},i="Doc-Scanner Examples",a={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Process Documents Interactively",id:"process-documents-interactively",level:3},{value:"Programmatic Usage",id:"programmatic-usage",level:2},{value:"Process Single Document",id:"process-single-document",level:3},{value:"Batch Document Processing",id:"batch-document-processing",level:3},{value:"Output Structure",id:"output-structure",level:2},{value:"Supported Document Types",id:"supported-document-types",level:2},{value:"Extracted Metadata",id:"extracted-metadata",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Custom Gemini Settings",id:"custom-gemini-settings",level:3},{value:"Environment Configuration",id:"environment-configuration",level:3},{value:"Tips",id:"tips",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"doc-scanner-examples",children:"Doc-Scanner Examples"})}),"\n",(0,o.jsx)(n.p,{children:"The doc-scanner application processes documents (PDF, DOC, DOCX) to extract metadata and generate contextual histories."}),"\n",(0,o.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,o.jsx)(n.h3,{id:"process-documents-interactively",children:"Process Documents Interactively"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# 1. Place documents in input directory\nmkdir -p apps/doc-scanner/src/data/input/123204604000\ncp /path/to/documents/*.pdf apps/doc-scanner/src/data/input/123204604000/\n\n# 2. Run the scanner\nnpx nx run doc-scanner:start\n# Enter GEMI ID: 123204604000\n\n# 3. Find results in output directory\nls apps/doc-scanner/src/data/output/123204604000/\n"})}),"\n",(0,o.jsx)(n.h2,{id:"programmatic-usage",children:"Programmatic Usage"}),"\n",(0,o.jsx)(n.h3,{id:"process-single-document",children:"Process Single Document"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'import { processSingleFile } from "./apps/doc-scanner/src/processing-logic.mjs";\nimport { getMetadataModel } from "./apps/doc-scanner/src/gemini-config.mjs";\n\nasync function processDocument(filePath, outputDir, fileName) {\n  const model = getMetadataModel();\n\n  try {\n    const result = await processSingleFile(\n      filePath,\n      outputDir,\n      fileName,\n      model\n    );\n\n    if (result.status === "success") {\n      console.log("Processing successful:", result.data);\n      return result.data;\n    } else {\n      console.error("Processing failed:", result.reason);\n      throw new Error(result.reason);\n    }\n  } catch (error) {\n    console.error("Error processing document:", error);\n    throw error;\n  }\n}\n\n// Usage\nconst result = await processDocument(\n  "./input/document.pdf",\n  "./output",\n  "document.pdf"\n);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"batch-document-processing",children:"Batch Document Processing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'import fs from "fs/promises";\nimport path from "path";\nimport pLimit from "p-limit";\nimport { processSingleFile } from "./apps/doc-scanner/src/processing-logic.mjs";\nimport { getMetadataModel } from "./apps/doc-scanner/src/gemini-config.mjs";\n\nasync function batchProcessDocuments(inputDir, outputDir, concurrency = 5) {\n  const files = await fs.readdir(inputDir);\n  const documentFiles = files.filter((f) => /\\.(pdf|docx?)$/i.test(f));\n\n  const limit = pLimit(concurrency);\n  const model = getMetadataModel();\n\n  const tasks = documentFiles.map((file) =>\n    limit(() =>\n      processSingleFile(path.join(inputDir, file), outputDir, file, model)\n    )\n  );\n\n  const results = await Promise.allSettled(tasks);\n  return results.map((result, index) => ({\n    file: documentFiles[index],\n    result: result.status === "fulfilled" ? result.value : result.reason,\n  }));\n}\n\n// Usage\nconst results = await batchProcessDocuments(\n  "./input/123204604000",\n  "./output/123204604000"\n);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"output-structure",children:"Output Structure"}),"\n",(0,o.jsx)(n.p,{children:"Processed documents generate structured outputs:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"apps/doc-scanner/src/data/output/123204604000/\n\u251c\u2500\u2500 document_metadata/\n\u2502   \u251c\u2500\u2500 document1.json\n\u2502   \u251c\u2500\u2500 document2.json\n\u2502   \u2514\u2500\u2500 document3.json\n\u2514\u2500\u2500 123204604000_contextual_document_histories.json\n"})}),"\n",(0,o.jsx)(n.h2,{id:"supported-document-types",children:"Supported Document Types"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"PDF"}),": Company registration, financial reports"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"DOCX"}),": Modern Word documents"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"DOC"}),": Legacy Word documents"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"extracted-metadata",children:"Extracted Metadata"}),"\n",(0,o.jsx)(n.p,{children:"Each document produces structured JSON with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "companyName": "ALPHA BANK AE",\n  "legalForm": "AE",\n  "registrationNumber": "000123456789",\n  "documentType": "INCORPORATION_DOCUMENT",\n  "documentDate": "2019-09-23",\n  "address": {\n    "street": "Stadiou 40",\n    "city": "Athens",\n    "postalCode": "10564"\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.h3,{id:"custom-gemini-settings",children:"Custom Gemini Settings"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'import { GoogleGenerativeAI } from "@google/generative-ai";\n\nexport function getCustomModel(options = {}) {\n  const {\n    modelName = "gemini-2.0-flash-lite",\n    temperature = 0.1,\n    maxTokens = 8192,\n  } = options;\n\n  const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n\n  return genAI.getGenerativeModel({\n    model: modelName,\n    generationConfig: {\n      temperature,\n      maxOutputTokens: maxTokens,\n      responseMimeType: "application/json",\n    },\n  });\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"environment-configuration",children:"Environment Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# .env settings for doc-scanner\nGEMINI_API_KEY=your_api_key_here\nGEMINI_CONCURRENCY_LIMIT=15\nNODE_ENV=production\n"})}),"\n",(0,o.jsx)(n.h2,{id:"tips",children:"Tips"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Ensure Gemini API key is valid and has sufficient quota"}),"\n",(0,o.jsx)(n.li,{children:"Use appropriate concurrency limits (default: 15)"}),"\n",(0,o.jsx)(n.li,{children:"Monitor API usage to avoid rate limits"}),"\n",(0,o.jsx)(n.li,{children:"Check file permissions for input/output directories"}),"\n",(0,o.jsx)(n.li,{children:"Large documents may take longer to process (5-20 seconds each)"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>i});var t=s(6540);const o={},r=t.createContext(o);function c(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);